/**
 * Pozn√°mky modul - JavaScript funkcionalita s datab√°z√≠
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('üü¢ Pozn√°mky modul - JavaScript naƒçten');
    
    // Inicializace modulu
    initNotesModule();
});

/**
 * Inicializace modulu pozn√°mek
 */
function initNotesModule() {
    console.log('üü° Inicializace modulu pozn√°mek...');
    
    // Najdeme tlaƒç√≠tka
    const addNoteBtn = document.getElementById('addNoteBtn');
    const searchNotesBtn = document.getElementById('searchNotesBtn');
    
    console.log('üîç Hled√°m tlaƒç√≠tka:', {
        addNoteBtn: !!addNoteBtn,
        searchNotesBtn: !!searchNotesBtn
    });
    
    // Event listenery pro tlaƒç√≠tka
    if (addNoteBtn) {
        addNoteBtn.addEventListener('click', function() {
            console.log('üñ±Ô∏è Kliknuto na "P≈ôidat pozn√°mku"');
            showAddNoteForm();
        });
    }
    
    if (searchNotesBtn) {
        searchNotesBtn.addEventListener('click', function() {
            console.log('üñ±Ô∏è Kliknuto na "Hledat v pozn√°mk√°ch"');
            showSearchForm();
        });
    }
    
    // Naƒçteme pozn√°mky z datab√°ze p≈ôi startu
    loadNotesFromDatabase();
    
    console.log('‚úÖ Pozn√°mky modul je p≈ôipraven k pou≈æit√≠');
}

/**
 * Naƒçte pozn√°mky z datab√°ze
 */
function loadNotesFromDatabase() {
    console.log('üì• Naƒç√≠t√°m pozn√°mky z datab√°ze...');
    
    // Zobraz√≠me loading indik√°tor
    showLoadingState();
    
    // AJAX vol√°n√≠ pro naƒçten√≠ dat
    makeAjaxCall('getAllData')
        .then(data => {
            console.log('üìä Data z datab√°ze naƒçtena:', data);
            
            // Aktualizujeme UI s daty z datab√°ze
            displayNotes(data.notes || []);
            updateStatisticsFromServer(data.statistics || {});
            
            console.log('‚úÖ Pozn√°mky √∫spƒõ≈°nƒõ naƒçteny z datab√°ze');
        })
        .catch(error => {
            console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ pozn√°mek:', error);
            showError('Nepoda≈ôilo se naƒç√≠st pozn√°mky z datab√°ze: ' + error.message);
        })
        .finally(() => {
            hideLoadingState();
        });
}

/**
 * Zobraz√≠ loading stav
 */
function showLoadingState() {
    const mainCardBody = document.querySelector('.notes-dashboard .col-md-8 .card-body');
    if (mainCardBody) {
        mainCardBody.innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Naƒç√≠t√°m...</span>
                </div>
                <p class="mt-2 text-muted">Naƒç√≠t√°m pozn√°mky...</p>
            </div>
        `;
    }
}

/**
 * Skryje loading stav
 */
function hideLoadingState() {
    // Loading se skryje automaticky p≈ôi zobrazen√≠ pozn√°mek
}

/**
 * Zobraz√≠ seznam pozn√°mek
 */
function displayNotes(notes) {
    console.log('üìã Zobrazuji pozn√°mky:', notes.length);
    
    const mainCardBody = document.querySelector('.notes-dashboard .col-md-8 .card-body');
    if (!mainCardBody) {
        console.error('‚ùå Nepoda≈ôilo se naj√≠t kontejner pro pozn√°mky');
        return;
    }
    
    // Pokud nejsou ≈æ√°dn√© pozn√°mky, zobraz√≠me empty state
    if (notes.length === 0) {
        showEmptyState();
        return;
    }
    
    // Vytvo≈ô√≠me HTML pro v≈°echny pozn√°mky
    let notesHtml = '<div id="notesContainer">';
    
    notes.forEach(note => {
        notesHtml += createNoteHtml(note);
    });
    
    notesHtml += '</div>';
    
    // Zobraz√≠me pozn√°mky
    mainCardBody.innerHTML = notesHtml;
    
    console.log('‚úÖ Pozn√°mky zobrazeny v UI');
}

/**
 * Vytvo≈ô√≠ HTML pro jednu pozn√°mku
 */
function createNoteHtml(note) {
    const priorityClass = {
        'low': 'text-secondary',
        'normal': 'text-primary', 
        'high': 'text-danger'
    };
    
    const priorityIcon = {
        'low': 'bi-arrow-down',
        'normal': 'bi-dash',
        'high': 'bi-arrow-up'
    };
    
    return `
        <div class="note-item" data-note-id="${note.id}">
            <div class="d-flex justify-content-between align-items-start mb-2">
                <div class="note-title">${escapeHtml(note.title)}</div>
                <div class="note-priority ${priorityClass[note.priority] || 'text-primary'}">
                    <i class="bi ${priorityIcon[note.priority] || 'bi-dash'}"></i>
                    ${note.priority}
                </div>
            </div>
            
            ${note.category ? `<div class="note-category mb-2">
                <span class="badge bg-secondary">${escapeHtml(note.category)}</span>
            </div>` : ''}
            
            <div class="note-content">${escapeHtml(note.content)}</div>
            
            ${note.tags && note.tags.length > 0 ? `<div class="note-tags mb-2">
                ${note.tags.map(tag => `<span class="badge bg-light text-dark">#${escapeHtml(tag.trim())}</span>`).join(' ')}
            </div>` : ''}
            
            <div class="note-meta">
                <div class="note-date">
                    Vytvo≈ôeno: ${note.formatted_date}
                    ${note.formatted_updated ? `<br>Upraveno: ${note.formatted_updated}` : ''}
                </div>
                <div class="note-actions">
                    <button class="btn btn-sm btn-outline-primary" onclick="editNote(${note.id})">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" onclick="deleteNote(${note.id})">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    `;
}

/**
 * Zobraz√≠ formul√°≈ô pro p≈ôid√°n√≠ nov√© pozn√°mky (s kategoriemi a prioritami)
 */
function showAddNoteForm() {
    console.log('üìù Zobrazuji formul√°≈ô pro novou pozn√°mku');
    
    // Najdeme m√≠sto, kam vlo≈æ√≠me formul√°≈ô
    const mainCard = document.querySelector('.notes-dashboard .col-md-8 .card-body');
    
    if (!mainCard) {
        console.error('‚ùå Nepoda≈ôilo se naj√≠t m√≠sto pro formul√°≈ô');
        return;
    }
    
    // HTML pro formul√°≈ô s kategoriemi a prioritami
    const formHtml = `
        <div class="note-form show" id="addNoteForm">
            <h6><i class="bi bi-plus-circle me-2"></i>Nov√° pozn√°mka</h6>
            <form>
                <div class="row mb-3">
                    <div class="col-md-8">
                        <label for="noteTitle" class="form-label">N√°zev pozn√°mky</label>
                        <input type="text" class="form-control" id="noteTitle" placeholder="Zadejte n√°zev pozn√°mky">
                    </div>
                    <div class="col-md-4">
                        <label for="notePriority" class="form-label">Priorita</label>
                        <select class="form-select" id="notePriority">
                            <option value="low">N√≠zk√°</option>
                            <option value="normal" selected>Norm√°ln√≠</option>
                            <option value="high">Vysok√°</option>
                        </select>
                    </div>
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="noteCategory" class="form-label">Kategorie</label>
                        <input type="text" class="form-control" id="noteCategory" placeholder="Nap≈ô: Pr√°ce, Osobn√≠...">
                    </div>
                    <div class="col-md-6">
                        <label for="noteTags" class="form-label">≈†t√≠tky</label>
                        <input type="text" class="form-control" id="noteTags" placeholder="≈†t√≠tky oddƒõlen√© ƒç√°rkami">
                    </div>
                </div>
                
                <div class="mb-3">
                    <label for="noteContent" class="form-label">Obsah</label>
                    <textarea class="form-control" id="noteContent" rows="4" placeholder="Napi≈°te svou pozn√°mku..."></textarea>
                </div>
                
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary" id="saveNoteBtn">
                        <i class="bi bi-check"></i> Ulo≈æit pozn√°mku
                    </button>
                    <button type="button" class="btn btn-outline-secondary" id="cancelNoteBtn">
                        <i class="bi bi-x"></i> Zru≈°it
                    </button>
                </div>
            </form>
        </div>
    `;
    
    // Vlo≈æ√≠me formul√°≈ô na zaƒç√°tek
    mainCard.insertAdjacentHTML('afterbegin', formHtml);
    
    // P≈ôid√°me event listenery pro tlaƒç√≠tka formul√°≈ôe
    setupFormEventListeners();
    
    // Fokus na prvn√≠ pole
    document.getElementById('noteTitle').focus();
}

/**
 * Nastaven√≠ event listener≈Ø pro formul√°≈ô
 */
function setupFormEventListeners() {
    const saveBtn = document.getElementById('saveNoteBtn');
    const cancelBtn = document.getElementById('cancelNoteBtn');
    
    if (saveBtn) {
        saveBtn.addEventListener('click', function() {
            console.log('üíæ Ukl√°d√°n√≠ pozn√°mky...');
            saveNoteToDatabase();
        });
    }
    
    if (cancelBtn) {
        cancelBtn.addEventListener('click', function() {
            console.log('‚ùå Zru≈°en√≠ formul√°≈ôe');
            hideAddNoteForm();
        });
    }
}

/**
 * Ulo≈æ√≠ pozn√°mku do datab√°ze
 */
function saveNoteToDatabase() {
    const titleInput = document.getElementById('noteTitle');
    const contentInput = document.getElementById('noteContent');
    const categoryInput = document.getElementById('noteCategory');
    const priorityInput = document.getElementById('notePriority');
    const tagsInput = document.getElementById('noteTags');
    
    if (!titleInput || !contentInput) {
        console.error('‚ùå Nepoda≈ôilo se naj√≠t pole formul√°≈ôe');
        return;
    }
    
    const title = titleInput.value.trim();
    const content = contentInput.value.trim();
    const category = categoryInput.value.trim();
    const priority = priorityInput.value;
    const tags = tagsInput.value.trim();
    
    if (!title) {
        alert('Zadejte pros√≠m n√°zev pozn√°mky');
        titleInput.focus();
        return;
    }
    
    if (!content) {
        alert('Zadejte pros√≠m obsah pozn√°mky');
        contentInput.focus();
        return;
    }
    
    console.log('üìù Ukl√°d√°m pozn√°mku do datab√°ze:', { title, content, category, priority, tags });
    
    // Disable tlaƒç√≠tko bƒõhem ukl√°d√°n√≠
    const saveBtn = document.getElementById('saveNoteBtn');
    if (saveBtn) {
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Ukl√°d√°m...';
    }
    
    // AJAX vol√°n√≠ pro ulo≈æen√≠
    const noteData = {
        title: title,
        content: content,
        category: category || null,
        priority: priority,
        tags: tags || null
    };
    
    makeAjaxCall('addNote', noteData)
        .then(note => {
            console.log('‚úÖ Pozn√°mka ulo≈æena do datab√°ze:', note);
            
            // Skryjeme formul√°≈ô
            hideAddNoteForm();
            
            // Znovu naƒçteme v≈°echny pozn√°mky
            loadNotesFromDatabase();
            
        })
        .catch(error => {
            console.error('‚ùå Chyba p≈ôi ukl√°d√°n√≠ pozn√°mky:', error);
            showError('Nepoda≈ôilo se ulo≈æit pozn√°mku: ' + error.message);
            
            // Obnov√≠me tlaƒç√≠tko
            if (saveBtn) {
                saveBtn.disabled = false;
                saveBtn.innerHTML = '<i class="bi bi-check"></i> Ulo≈æit pozn√°mku';
            }
        });
}

/**
 * Obecn√© AJAX vol√°n√≠
 */
function makeAjaxCall(action, parameters = {}) {
    console.log(`üîó AJAX vol√°n√≠: ${action}`, parameters);
    
    // Vytvo≈ô√≠me URL pro AJAX
    const currentLocation = window.location;
    const baseUrl = currentLocation.protocol + '//' + currentLocation.host + currentLocation.pathname;
    const ajaxUrl = baseUrl + '?do=moduleData&moduleId=notes&action=' + encodeURIComponent(action);
    
    // P≈ôid√°me parametry jako POST data
    const formData = new FormData();
    for (const [key, value] of Object.entries(parameters)) {
        if (value !== null && value !== undefined) {
            formData.append(key, value);
        }
    }
    
    return fetch(ajaxUrl, {
        method: 'POST',
        headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json',
            'Cache-Control': 'no-cache'
        },
        body: formData
    })
    .then(response => {
        console.log('üì• AJAX odpovƒõƒè:', response.status, response.statusText);
        
        if (!response.ok) {
            return response.text().then(text => {
                console.error('‚ùå Server error response:', text.substring(0, 500));
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            });
        }
        
        return response.json();
    })
    .then(data => {
        console.log('üìä AJAX data parsed:', data);
        
        if (data.success === false) {
            throw new Error(data.error || 'Nezn√°m√° chyba serveru');
        }
        
        return data.data || data;
    });
}

/**
 * Sma≈æe pozn√°mku z datab√°ze
 */
function deleteNote(noteId) {
    console.log('üóëÔ∏è Maz√°n√≠ pozn√°mky ID:', noteId);
    
    if (confirm('Opravdu chcete smazat tuto pozn√°mku?')) {
        makeAjaxCall('deleteNote', { id: noteId })
            .then(result => {
                console.log('‚úÖ Pozn√°mka smaz√°na z datab√°ze:', result);
                
                // Znovu naƒçteme pozn√°mky
                loadNotesFromDatabase();
            })
            .catch(error => {
                console.error('‚ùå Chyba p≈ôi maz√°n√≠ pozn√°mky:', error);
                showError('Nepoda≈ôilo se smazat pozn√°mku: ' + error.message);
            });
    }
}

/**
 * Upravit pozn√°mku
 */
function editNote(noteId) {
    console.log('‚úèÔ∏è Naƒç√≠t√°m pozn√°mku pro editaci ID:', noteId);
    
    // Najdeme pozn√°mku v DOM
    const noteElement = document.querySelector(`[data-note-id="${noteId}"]`);
    if (!noteElement) {
        console.error('‚ùå Nepoda≈ôilo se naj√≠t pozn√°mku v DOM');
        return;
    }
    
    // Z√≠sk√°me data pozn√°mky z DOM (z HTML)
    const currentTitle = noteElement.querySelector('.note-title').textContent.trim();
    const currentContent = noteElement.querySelector('.note-content').textContent.trim();
    
    // Z√≠sk√°me kategorii a prioritu
    const categoryElement = noteElement.querySelector('.note-category .badge');
    const currentCategory = categoryElement ? categoryElement.textContent.trim() : '';
    
    const priorityElement = noteElement.querySelector('.note-priority');
    const currentPriority = priorityElement ? priorityElement.textContent.trim() : 'normal';
    
    // Z√≠sk√°me ≈°t√≠tky
    const tagsElements = noteElement.querySelectorAll('.note-tags .badge');
    const currentTags = Array.from(tagsElements).map(tag => tag.textContent.replace('#', '').trim()).join(', ');
    
    console.log('üìã Data pozn√°mky pro editaci:', {
        title: currentTitle,
        content: currentContent,
        category: currentCategory,
        priority: currentPriority,
        tags: currentTags
    });
    
    // Zobraz√≠me editaƒçn√≠ formul√°≈ô
    showEditNoteForm(noteId, {
        title: currentTitle,
        content: currentContent,
        category: currentCategory,
        priority: currentPriority,
        tags: currentTags
    });
}

/**
 * Zobraz√≠ formul√°≈ô pro editaci pozn√°mky
 */
function showEditNoteForm(noteId, noteData) {
    console.log('üìù Zobrazuji formul√°≈ô pro editaci pozn√°mky ID:', noteId);
    
    // Najdeme m√≠sto, kam vlo≈æ√≠me formul√°≈ô
    const mainCard = document.querySelector('.notes-dashboard .col-md-8 .card-body');
    
    if (!mainCard) {
        console.error('‚ùå Nepoda≈ôilo se naj√≠t m√≠sto pro formul√°≈ô');
        return;
    }
    
    // Odstranit p≈ô√≠padn√Ω existuj√≠c√≠ formul√°≈ô
    const existingForm = document.getElementById('editNoteForm');
    if (existingForm) {
        existingForm.remove();
    }
    
    // HTML pro editaƒçn√≠ formul√°≈ô (podobn√Ω jako p≈ôid√°v√°n√≠, ale s p≈ôedvyplnƒõn√Ωmi daty)
    const formHtml = `
        <div class="note-form show" id="editNoteForm">
            <h6><i class="bi bi-pencil me-2"></i>Upravit pozn√°mku</h6>
            <form>
                <div class="row mb-3">
                    <div class="col-md-8">
                        <label for="editNoteTitle" class="form-label">N√°zev pozn√°mky</label>
                        <input type="text" class="form-control" id="editNoteTitle" value="${escapeHtml(noteData.title)}" placeholder="Zadejte n√°zev pozn√°mky">
                    </div>
                    <div class="col-md-4">
                        <label for="editNotePriority" class="form-label">Priorita</label>
                        <select class="form-select" id="editNotePriority">
                            <option value="low" ${noteData.priority === 'low' ? 'selected' : ''}>N√≠zk√°</option>
                            <option value="normal" ${noteData.priority === 'normal' ? 'selected' : ''}>Norm√°ln√≠</option>
                            <option value="high" ${noteData.priority === 'high' ? 'selected' : ''}>Vysok√°</option>
                        </select>
                    </div>
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="editNoteCategory" class="form-label">Kategorie</label>
                        <input type="text" class="form-control" id="editNoteCategory" value="${escapeHtml(noteData.category)}" placeholder="Nap≈ô: Pr√°ce, Osobn√≠...">
                    </div>
                    <div class="col-md-6">
                        <label for="editNoteTags" class="form-label">≈†t√≠tky</label>
                        <input type="text" class="form-control" id="editNoteTags" value="${escapeHtml(noteData.tags)}" placeholder="≈†t√≠tky oddƒõlen√© ƒç√°rkami">
                    </div>
                </div>
                
                <div class="mb-3">
                    <label for="editNoteContent" class="form-label">Obsah</label>
                    <textarea class="form-control" id="editNoteContent" rows="4" placeholder="Napi≈°te svou pozn√°mku...">${escapeHtml(noteData.content)}</textarea>
                </div>
                
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary" id="updateNoteBtn" data-note-id="${noteId}">
                        <i class="bi bi-check"></i> Ulo≈æit zmƒõny
                    </button>
                    <button type="button" class="btn btn-outline-secondary" id="cancelEditBtn">
                        <i class="bi bi-x"></i> Zru≈°it
                    </button>
                </div>
            </form>
        </div>
    `;
    
    // Vlo≈æ√≠me formul√°≈ô na zaƒç√°tek
    mainCard.insertAdjacentHTML('afterbegin', formHtml);
    
    // P≈ôid√°me event listenery pro tlaƒç√≠tka formul√°≈ôe
    setupEditFormEventListeners(noteId);
    
    // Fokus na prvn√≠ pole
    document.getElementById('editNoteTitle').focus();
    
    // Scroll nahoru k formul√°≈ôi
    document.getElementById('editNoteForm').scrollIntoView({ behavior: 'smooth' });
}

/**
 * Nastaven√≠ event listener≈Ø pro editaƒçn√≠ formul√°≈ô
 */
function setupEditFormEventListeners(noteId) {
    const updateBtn = document.getElementById('updateNoteBtn');
    const cancelBtn = document.getElementById('cancelEditBtn');
    
    if (updateBtn) {
        updateBtn.addEventListener('click', function() {
            console.log('üíæ Aktualizov√°n√≠ pozn√°mky...');
            updateNoteInDatabase(noteId);
        });
    }
    
    if (cancelBtn) {
        cancelBtn.addEventListener('click', function() {
            console.log('‚ùå Zru≈°en√≠ editace');
            hideEditNoteForm();
        });
    }
}

/**
 * Aktualizuje pozn√°mku v datab√°zi
 */
function updateNoteInDatabase(noteId) {
    const titleInput = document.getElementById('editNoteTitle');
    const contentInput = document.getElementById('editNoteContent');
    const categoryInput = document.getElementById('editNoteCategory');
    const priorityInput = document.getElementById('editNotePriority');
    const tagsInput = document.getElementById('editNoteTags');
    
    if (!titleInput || !contentInput) {
        console.error('‚ùå Nepoda≈ôilo se naj√≠t pole formul√°≈ôe');
        return;
    }
    
    const title = titleInput.value.trim();
    const content = contentInput.value.trim();
    const category = categoryInput.value.trim();
    const priority = priorityInput.value;
    const tags = tagsInput.value.trim();
    
    if (!title) {
        alert('Zadejte pros√≠m n√°zev pozn√°mky');
        titleInput.focus();
        return;
    }
    
    if (!content) {
        alert('Zadejte pros√≠m obsah pozn√°mky');
        contentInput.focus();
        return;
    }
    
    console.log('üìù Aktualizuji pozn√°mku v datab√°zi:', { noteId, title, content, category, priority, tags });
    
    // Disable tlaƒç√≠tko bƒõhem aktualizace
    const updateBtn = document.getElementById('updateNoteBtn');
    if (updateBtn) {
        updateBtn.disabled = true;
        updateBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Ukl√°d√°m...';
    }
    
    // AJAX vol√°n√≠ pro aktualizaci
    const noteData = {
        id: noteId,
        title: title,
        content: content,
        category: category || null,
        priority: priority,
        tags: tags || null
    };
    
    makeAjaxCall('updateNote', noteData)
        .then(updatedNote => {
            console.log('‚úÖ Pozn√°mka aktualizov√°na v datab√°zi:', updatedNote);
            
            // Skryjeme formul√°≈ô
            hideEditNoteForm();
            
            // Znovu naƒçteme v≈°echny pozn√°mky
            loadNotesFromDatabase();
            
        })
        .catch(error => {
            console.error('‚ùå Chyba p≈ôi aktualizaci pozn√°mky:', error);
            showError('Nepoda≈ôilo se aktualizovat pozn√°mku: ' + error.message);
            
            // Obnov√≠me tlaƒç√≠tko
            if (updateBtn) {
                updateBtn.disabled = false;
                updateBtn.innerHTML = '<i class="bi bi-check"></i> Ulo≈æit zmƒõny';
            }
        });
}

/**
 * Skryje editaƒçn√≠ formul√°≈ô
 */
function hideEditNoteForm() {
    const form = document.getElementById('editNoteForm');
    if (form) {
        form.remove();
    }
}

/**
 * Zobraz√≠ funkƒçn√≠ vyhled√°vac√≠ formul√°≈ô
 */
function showSearchForm() {
    console.log('üîç Zobrazuji vyhled√°v√°n√≠');
    
    // Najdeme m√≠sto, kam vlo≈æ√≠me formul√°≈ô
    const mainCard = document.querySelector('.notes-dashboard .col-md-8 .card-body');
    
    if (!mainCard) {
        console.error('‚ùå Nepoda≈ôilo se naj√≠t m√≠sto pro formul√°≈ô');
        return;
    }
    
    // Odstranit p≈ô√≠padn√Ω existuj√≠c√≠ formul√°≈ô
    const existingForm = document.getElementById('searchNoteForm');
    if (existingForm) {
        existingForm.remove();
    }
    
    // HTML pro vyhled√°vac√≠ formul√°≈ô
    const searchFormHtml = `
        <div class="note-form show" id="searchNoteForm">
            <h6><i class="bi bi-search me-2"></i>Vyhledat v pozn√°mk√°ch</h6>
            <form>
                <div class="row mb-3">
                    <div class="col-md-8">
                        <label for="searchQuery" class="form-label">Hledan√Ω v√Ωraz</label>
                        <input type="text" class="form-control" id="searchQuery" placeholder="Hledejte v n√°zvech, obsahu nebo ≈°t√≠tc√≠ch...">
                    </div>
                    <div class="col-md-4">
                        <label for="searchCategory" class="form-label">Kategorie</label>
                        <select class="form-select" id="searchCategory">
                            <option value="">V≈°echny kategorie</option>
                        </select>
                    </div>
                </div>
                
                <div class="d-flex gap-2 mb-3">
                    <button type="button" class="btn btn-primary" id="searchBtn">
                        <i class="bi bi-search"></i> Hledat
                    </button>
                    <button type="button" class="btn btn-outline-secondary" id="clearSearchBtn">
                        <i class="bi bi-x-circle"></i> Vymazat formul√°≈ô
                    </button>
                    <button type="button" class="btn btn-outline-secondary" id="cancelSearchBtn">
                        <i class="bi bi-x"></i> Zru≈°it
                    </button>
                </div>
                
                <div id="searchResults" class="mt-3" style="display: none;">
                    <h6 class="text-muted">V√Ωsledky vyhled√°v√°n√≠:</h6>
                    <div id="searchResultsContainer"></div>
                </div>
            </form>
        </div>
    `;
    
    // Vlo≈æ√≠me formul√°≈ô na zaƒç√°tek
    mainCard.insertAdjacentHTML('afterbegin', searchFormHtml);
    
    // Naƒçteme kategorie pro select
    loadCategoriesForSearch();
    
    // P≈ôid√°me event listenery
    setupSearchFormEventListeners();
    
    // Fokus na vyhled√°vac√≠ pole
    document.getElementById('searchQuery').focus();
    
    // Scroll nahoru k formul√°≈ôi
    document.getElementById('searchNoteForm').scrollIntoView({ behavior: 'smooth' });
}

/**
 * Naƒçte kategorie pro vyhled√°vac√≠ formul√°≈ô
 */
function loadCategoriesForSearch() {
    console.log('üìÇ Naƒç√≠t√°m kategorie pro vyhled√°v√°n√≠');
    
    makeAjaxCall('getCategories')
        .then(categories => {
            console.log('üìÇ Kategorie naƒçteny:', categories);
            
            const categorySelect = document.getElementById('searchCategory');
            if (categorySelect && categories.length > 0) {
                // P≈ôid√°me kategorie do selectu
                categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category;
                    option.textContent = category;
                    categorySelect.appendChild(option);
                });
            }
        })
        .catch(error => {
            console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ kategori√≠:', error);
        });
}

/**
 * Nastaven√≠ event listener≈Ø pro vyhled√°vac√≠ formul√°≈ô (s lep≈°√≠mi popisky)
 */
function setupSearchFormEventListeners() {
    const searchBtn = document.getElementById('searchBtn');
    const clearSearchBtn = document.getElementById('clearSearchBtn');
    const cancelSearchBtn = document.getElementById('cancelSearchBtn');
    const searchQuery = document.getElementById('searchQuery');
    
    if (searchBtn) {
        searchBtn.addEventListener('click', function() {
            console.log('üîç Spou≈°t√≠m vyhled√°v√°n√≠');
            performSearch();
        });
    }
    
    if (clearSearchBtn) {
        clearSearchBtn.addEventListener('click', function() {
            console.log('üóëÔ∏è Ma≈æu obsah vyhled√°vac√≠ch pol√≠');
            clearSearch();
        });
    }
    
    if (cancelSearchBtn) {
        cancelSearchBtn.addEventListener('click', function() {
            console.log('‚ùå Zav√≠r√°m vyhled√°v√°n√≠');
            hideSearchForm();
        });
    }
    
    // Vyhled√°v√°n√≠ p≈ôi stisku Enter
    if (searchQuery) {
        searchQuery.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                performSearch();
            }
        });
    }
}

/**
 * Provede vyhled√°v√°n√≠
 */
function performSearch() {
    const searchQuery = document.getElementById('searchQuery');
    const searchCategory = document.getElementById('searchCategory');
    
    if (!searchQuery) {
        console.error('‚ùå Nepoda≈ôilo se naj√≠t vyhled√°vac√≠ pole');
        return;
    }
    
    const query = searchQuery.value.trim();
    const category = searchCategory ? searchCategory.value.trim() : '';
    
    if (!query && !category) {
        alert('Zadejte pros√≠m hledan√Ω v√Ωraz nebo vyberte kategorii');
        searchQuery.focus();
        return;
    }
    
    console.log('üîç Prov√°d√≠m vyhled√°v√°n√≠:', { query, category });
    
    // Disable tlaƒç√≠tko bƒõhem vyhled√°v√°n√≠
    const searchBtn = document.getElementById('searchBtn');
    if (searchBtn) {
        searchBtn.disabled = true;
        searchBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Hled√°m...';
    }
    
    // Rozhodneme, jakou AJAX akci pou≈æ√≠t
    let ajaxAction, ajaxParams;
    
    if (category && !query) {
        // Hled√°n√≠ pouze podle kategorie
        ajaxAction = 'getNotesByCategory';
        ajaxParams = { category: category };
    } else {
        // Hled√°n√≠ podle textu
        ajaxAction = 'searchNotes';
        ajaxParams = { query: query };
    }
    
    makeAjaxCall(ajaxAction, ajaxParams)
        .then(results => {
            console.log('‚úÖ V√Ωsledky vyhled√°v√°n√≠:', results);
            
            displaySearchResults(results, query, category);
            
        })
        .catch(error => {
            console.error('‚ùå Chyba p≈ôi vyhled√°v√°n√≠:', error);
            showError('Nepoda≈ôilo se prov√©st vyhled√°v√°n√≠: ' + error.message);
        })
        .finally(() => {
            // Obnov√≠me tlaƒç√≠tko
            if (searchBtn) {
                searchBtn.disabled = false;
                searchBtn.innerHTML = '<i class="bi bi-search"></i> Hledat';
            }
        });
}

/**
 * Zobraz√≠ v√Ωsledky vyhled√°v√°n√≠ (skryje p≈Øvodn√≠ seznam)
 */
function displaySearchResults(results, query, category) {
    console.log('üìã Zobrazuji v√Ωsledky vyhled√°v√°n√≠:', results.length);
    
    const searchResults = document.getElementById('searchResults');
    const searchResultsContainer = document.getElementById('searchResultsContainer');
    
    if (!searchResults || !searchResultsContainer) {
        console.error('‚ùå Nepoda≈ôilo se naj√≠t kontejner pro v√Ωsledky');
        return;
    }
    
    // Skryjeme p≈Øvodn√≠ seznam pozn√°mek
    const originalNotesContainer = document.getElementById('notesContainer');
    const emptyState = document.querySelector('.empty-state-small');
    
    if (originalNotesContainer) {
        originalNotesContainer.style.display = 'none';
        console.log('üôà Skryl jsem p≈Øvodn√≠ seznam pozn√°mek');
    }
    
    if (emptyState) {
        emptyState.style.display = 'none';
        console.log('üôà Skryl jsem empty state');
    }
    
    // Zobraz√≠me sekci v√Ωsledk≈Ø
    searchResults.style.display = 'block';
    
    // Aktualizujeme nadpis s informac√≠ o vyhled√°v√°n√≠
    const resultsHeader = searchResults.querySelector('h6');
    if (resultsHeader) {
        let headerText = `V√Ωsledky vyhled√°v√°n√≠ (${results.length} ${results.length === 1 ? 'v√Ωsledek' : results.length <= 4 ? 'v√Ωsledky' : 'v√Ωsledk≈Ø'})`;
        
        if (query && category) {
            headerText += ` pro "${query}" v kategorii "${category}"`;
        } else if (query) {
            headerText += ` pro "${query}"`;
        } else if (category) {
            headerText += ` v kategorii "${category}"`;
        }
        
        resultsHeader.textContent = headerText;
    }
    
    // Pokud nejsou ≈æ√°dn√© v√Ωsledky
    if (results.length === 0) {
        searchResultsContainer.innerHTML = `
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                Nebyly nalezeny ≈æ√°dn√© pozn√°mky odpov√≠daj√≠c√≠ va≈°emu vyhled√°v√°n√≠.
                <br><small class="text-muted">Zkuste zmƒõnit hledan√Ω v√Ωraz nebo kategorii.</small>
            </div>
        `;
        return;
    }
    
    // Vytvo≈ô√≠me HTML pro v√Ωsledky
    let resultsHtml = '';
    results.forEach(note => {
        resultsHtml += createNoteHtml(note);
    });
    
    searchResultsContainer.innerHTML = resultsHtml;
    
    // Scroll k v√Ωsledk≈Øm
    searchResults.scrollIntoView({ behavior: 'smooth' });
}

/**
 * Vyma≈æe jen obsah pol√≠ (neru≈°√≠ vyhled√°v√°n√≠)
 */
function clearSearch() {
    console.log('üóëÔ∏è Ma≈æu obsah vyhled√°vac√≠ch pol√≠');
    
    // Vyma≈æeme jen obsah formul√°≈ôe
    const searchQuery = document.getElementById('searchQuery');
    const searchCategory = document.getElementById('searchCategory');
    
    if (searchQuery) {
        searchQuery.value = '';
        searchQuery.focus(); // Vr√°t√≠me fokus na pole
    }
    
    if (searchCategory) {
        searchCategory.value = '';
    }
    
    // Skryjeme v√Ωsledky (ale nech√°me formul√°≈ô otev≈ôen√Ω)
    const searchResults = document.getElementById('searchResults');
    if (searchResults) {
        searchResults.style.display = 'none';
    }
    
    // Zobraz√≠me zpƒõt p≈Øvodn√≠ seznam pozn√°mek
    showOriginalNotesList();
    
    console.log('‚úÖ Vyhled√°vac√≠ pole vymaz√°na, formul√°≈ô z≈Øst√°v√° otev≈ôen√Ω');
}

/**
 * Zobraz√≠ zpƒõt p≈Øvodn√≠ seznam pozn√°mek
 */
function showOriginalNotesList() {
    console.log('üëÅÔ∏è Zobrazuji zpƒõt p≈Øvodn√≠ seznam pozn√°mek');
    
    const originalNotesContainer = document.getElementById('notesContainer');
    const emptyState = document.querySelector('.empty-state-small');
    
    if (originalNotesContainer) {
        originalNotesContainer.style.display = 'block';
        console.log('üëÅÔ∏è Zobrazil jsem p≈Øvodn√≠ seznam pozn√°mek');
    } else if (emptyState) {
        emptyState.style.display = 'block';
        console.log('üëÅÔ∏è Zobrazil jsem empty state');
    } else {
        // Pokud nen√≠ ani seznam ani empty state, znovu naƒçteme
        console.log('üîÑ Znovu naƒç√≠t√°m pozn√°mky');
        loadNotesFromDatabase();
    }
}

/**
 * Skryje vyhled√°vac√≠ formul√°≈ô a vr√°t√≠ p≈Øvodn√≠ seznam
 */
function hideSearchForm() {
    console.log('‚ùå Zav√≠r√°m vyhled√°vac√≠ formul√°≈ô');
    
    // Zobraz√≠me zpƒõt p≈Øvodn√≠ seznam pozn√°mek
    showOriginalNotesList();
    
    // Odstran√≠me formul√°≈ô
    const form = document.getElementById('searchNoteForm');
    if (form) {
        form.remove();
    }
    
    console.log('‚úÖ Vyhled√°vac√≠ formul√°≈ô zav≈ôen, p≈Øvodn√≠ seznam obnoven');
}

/**
 * Aktualizuje statistiky ze serveru
 */
function updateStatisticsFromServer(stats) {
    console.log('üìä Aktualizuji statistiky ze serveru:', stats);
    
    const totalElement = document.querySelector('.stat-number.text-primary');
    const weekElement = document.querySelector('.stat-number.text-success');
    
    if (totalElement) {
        totalElement.textContent = stats.total || 0;
    }
    
    if (weekElement) {
        weekElement.textContent = stats.thisWeek || 0;
    }
    
    console.log('‚úÖ Statistiky aktualizov√°ny ze serveru');
}

/**
 * Zobraz√≠ chybovou zpr√°vu
 */
function showError(message) {
    // Vytvo≈ô√≠me alert pro chybovou zpr√°vu
    const alertHtml = `
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            ${escapeHtml(message)}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    
    // Najdeme m√≠sto pro alert
    const container = document.querySelector('.notes-dashboard');
    if (container) {
        container.insertAdjacentHTML('afterbegin', alertHtml);
    }
}

/**
 * Escape HTML pro bezpeƒçnost
 */
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

/**
 * Skryje formul√°≈ô pro p≈ôid√°n√≠ pozn√°mky
 */
function hideAddNoteForm() {
    const form = document.getElementById('addNoteForm');
    if (form) {
        form.remove();
    }
}

/**
 * Zobraz√≠ empty state kdy≈æ nejsou pozn√°mky
 */
function showEmptyState() {
    const mainCardBody = document.querySelector('.notes-dashboard .col-md-8 .card-body');
    if (mainCardBody) {
        const emptyStateHtml = `
            <div class="empty-state-small">
                <i class="bi bi-sticky text-muted"></i>
                <p class="mb-0">Zat√≠m nem√°te ≈æ√°dn√© pozn√°mky</p>
                <small class="text-muted">Kliknƒõte na "P≈ôidat pozn√°mku" pro vytvo≈ôen√≠ prvn√≠ pozn√°mky</small>
            </div>
        `;
        mainCardBody.innerHTML = emptyStateHtml;
    }
}

/**
 * Ve≈ôejn√© API modulu
 */
window.NotesModule = {
    version: '1.0.0',
    
    getInfo: function() {
        return {
            name: 'Pozn√°mky',
            version: this.version,
            status: 'active'
        };
    },
    
    addNote: showAddNoteForm,
    editNote: editNote,
    search: showSearchForm,
    refresh: loadNotesFromDatabase
};

console.log('üåü NotesModule API je dostupn√©:', window.NotesModule);