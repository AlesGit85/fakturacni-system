<?php

declare(strict_types=1);

namespace App\Security;

use Nette;

/**
 * T≈ô√≠da pro nastaven√≠ bezpeƒçnostn√≠ch HTTP hlaviƒçek
 */
class SecurityHeaders
{
    /**
     * Aplikuje bezpeƒçnostn√≠ hlaviƒçky na HTTP odpovƒõƒè
     */
    public static function apply(Nette\Http\Response $httpResponse): void
    {
        // Zak√°≈æe MIME-sniffing v prohl√≠≈æeƒç√≠ch
        $httpResponse->setHeader('X-Content-Type-Options', 'nosniff');

        // Chr√°n√≠ p≈ôed clickjacking √∫toky
        $httpResponse->setHeader('X-Frame-Options', 'DENY');

        // Nastavuje politiku referrer≈Ø
        $httpResponse->setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');

        // Chr√°n√≠ p≈ôed XSS √∫toky (m≈Ø≈æe b√Ωt pot≈ôeba upravit podle pot≈ôeb aplikace)
        $httpResponse->setHeader('X-XSS-Protection', '1; mode=block');

        // Content Security Policy - nastavuje pravidla pro naƒç√≠t√°n√≠ zdroj≈Ø
        // Toto je z√°kladn√≠ konfigurace, kterou m≈Ø≈æete upravit podle pot≈ôeb va≈°√≠ aplikace
        $cspDirectives = [
            "default-src 'self'",
            "script-src 'self' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com 'unsafe-inline'",
            "style-src 'self' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com https://fonts.googleapis.com 'unsafe-inline'",
            "img-src 'self' data:",
            "font-src 'self' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com https://fonts.gstatic.com",
            "connect-src 'self'",
            "frame-src 'none'",
            "object-src 'none'",
            "base-uri 'self'"
        ];

        $httpResponse->setHeader('Content-Security-Policy', implode('; ', $cspDirectives));

        // Ochrana proti CSRF √∫tok≈Øm (ji≈æ implementov√°no v Nette)
        // Ochrana p≈ôed odhalen√≠m informac√≠ o serveru
        $httpResponse->setHeader('Server', '');

        // HTTP Strict Transport Security - vynut√≠ HTTPS (pro produkƒçn√≠ nasazen√≠)
        // $httpResponse->setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload');
    }

    /**
     * üîí NOV√â: Vynut√≠ HTTPS pouze v produkƒçn√≠m prost≈ôed√≠
     */
    private static function enforceHttpsInProduction(): void
    {
        // Kontrola prost≈ôed√≠ - jen produkce
        if (!self::isProductionEnvironment()) {
            return; // Na localhostu/dev nic nedƒõl√°
        }

        // Kontrola, zda u≈æ je HTTPS
        if (self::isHttpsRequest()) {
            return; // U≈æ je HTTPS, OK
        }

        // Redirect HTTP ‚Üí HTTPS
        $httpsUrl = 'https://' . ($_SERVER['HTTP_HOST'] ?? 'localhost') . ($_SERVER['REQUEST_URI'] ?? '/');
        header('Location: ' . $httpsUrl, true, 301);
        exit;
    }

    /**
     * üîí NOV√â: Kontroluje, zda je po≈æadavek p≈ôes HTTPS
     */
    private static function isHttpsRequest(): bool
    {
        return (
            (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ||
            (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') ||
            (!empty($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == 443)
        );
    }

    /**
     * üîí NOV√â: Kontroluje, zda je produkƒçn√≠ prost≈ôed√≠
     */
    private static function isProductionEnvironment(): bool
    {
        // Kontrola dom√©ny
        $host = $_SERVER['HTTP_HOST'] ?? '';
        if (strpos($host, 'localhost') !== false || strpos($host, '127.0.0.1') !== false) {
            return false; // Localhost = ne produkce
        }

        // Kontrola .env
        $isProduction = $_ENV['ENVIRONMENT'] ?? 'development';
        return $isProduction === 'production';
    }
}
